{"version":3,"sources":["Component/Header.js","Component/Button.js","Component/CustomInput.js","Component/UserInput.js","Component/Fact.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Button","props","onClick","getRandomFact","value","CustomInput","UserInput","customInput","selected","startDate","onChange","getDate","Fact","factResult","App","state","Date","parse","moment","fetchFact","arg","console","log","fetch","crossDomain","then","res","text","fact","setState","catch","e","date","format","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"gLAQeA,G,MANA,kBACL,yBAAKC,UAAU,WACb,+CCEGC,EAJA,SAAAC,GAAK,OACnB,4BAAQF,UAAU,cAAcG,QAASD,EAAME,eAAgBF,EAAMG,QCYvDC,EAZI,SAAAJ,GAAK,OAExB,4BAAQF,UAAU,YAAYG,QAASD,EAAMC,SACtCD,EAAMG,Q,iBCIEE,EAPG,SAAAL,GAAK,OACb,yBAAKF,UAAU,aACb,kBAAC,IAAD,CACAQ,YAAe,kBAAC,EAAD,MACfC,SAAUP,EAAMQ,UAChBC,SAAUT,EAAMU,YCFbC,EAJF,SAAAX,GAAK,OAAK,yBAAKF,UAAU,QAC1B,+BAAKE,EAAMY,c,iBCoDRC,G,mNA5CbC,MAAQ,CACNN,UAAWO,KAAKC,MAAMC,OACtBN,KAAK,uB,EAQPO,UAAW,SAAAC,GACTC,QAAQC,IAAIF,GACZG,MAAM,4DAA8DH,EAAK,CACzEI,aAAY,IAEXC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAG,EAAKC,SAAS,CAACjB,KAAKgB,OAChCE,OAAM,SAAAC,GAAC,OAAIV,QAAQC,IAAIS,O,EAE1BpB,QAAU,SAAAqB,GACTX,QAAQC,IAAI,EAAKP,MAAMN,WACvB,EAAKoB,SAAS,CAAEpB,UAAWuB,IAAO,WAChC,EAAKb,UAAUD,IAAO,EAAKH,MAAMN,WAAWwB,OAAO,c,EAItD9B,cAAe,WACb,EAAKgB,UAAU,gB,kEArBfE,QAAQC,IAAI,MAAMY,KAAKnB,OACvBmB,KAAKf,UAAUD,IAAOgB,KAAKnB,MAAMN,WAAWwB,OAAO,Y,+BAwBrD,OAAQ,yBAAKlC,UAAU,OAChB,kBAAC,EAAD,MACA,yBAAKA,UAAU,WACf,kBAAC,EAAD,CAAQI,cAAiB+B,KAAK/B,cAAeC,MAAM,mBAEnD,kCACA,gFACA,kBAAC,EAAD,CAAWO,QAASuB,KAAKvB,QAASF,UAAWyB,KAAKnB,MAAMN,YACxD,kBAAC,EAAD,CAAMI,WAAYqB,KAAKnB,MAAMH,Y,GAzCpBuB,cCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCCNC,IAASC,OAEP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD6GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdnB,OAAM,SAAAoB,GACL7B,QAAQ6B,MAAMA,EAAMC,a","file":"static/js/main.71306308.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = ()=> \r\n         (<div className='heading'>\r\n            <h2>Facts Finder</h2>\r\n        </div>)\r\n           \r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst Button = props => \r\n(<button className='btn-generic' onClick={props.getRandomFact}>{props.value}</button>\r\n        )     \r\n\r\nexport default Button;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst CustomInput= props =>\r\n(\r\n<button className=\"customDOB\" onClick={props.onClick}>\r\n      {props.value}\r\n    </button> \r\n);\r\n\r\nCustomInput.propTypes={\r\n    onClick: PropTypes.func,\r\n    value: PropTypes.string\r\n};\r\n\r\nexport default CustomInput;","import React from 'react';\r\nimport CustomInput from './CustomInput';\r\nimport DatePicker from 'react-datepicker';\r\nconst UserInput = props=> \r\n         (<div className='userinput'>\r\n            <DatePicker\r\n            customInput = {<CustomInput/>}\r\n            selected={props.startDate}\r\n            onChange={props.getDate}/>\r\n        </div>)\r\nexport default UserInput;","import React from 'react';\r\n\r\nconst Fact = props=>  (<div className='fact'>\r\n            <p> {props.factResult}</p>\r\n        </div>)\r\n           \r\nexport default Fact;","import React,{Component} from 'react';\r\nimport './App.css';\r\nimport Header from  './Component/Header';\r\nimport Button from  './Component/Button';\r\nimport UserInput from  './Component/UserInput';\r\nimport Fact from  './Component/Fact';\r\nimport moment from 'moment';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    startDate: Date.parse(moment()),\r\n    Fact:'Fact is loading....'\r\n  }\r\n\r\n  componentDidMount(){\r\n    console.log('cdm',this.state);\r\n    this.fetchFact(moment(this.state.startDate).format(\"MM/DD\"));\r\n  }\r\n\r\n  fetchFact= arg=>{\r\n    console.log(arg);\r\n    fetch('https://cors-anywhere.herokuapp.com/http://numberapi.com/' + arg, {\r\n    crossDomain:true\r\n    })\r\n    .then(res => res.text())\r\n    .then(fact=> this.setState({Fact:fact}))\r\n    .catch(e => console.log(e))\r\n  }   \r\n  getDate = date => {\r\n   console.log(this.state.startDate);\r\n   this.setState({ startDate: date}, () =>{\r\n     this.fetchFact(moment(this.state.startDate).format(\"MM/DD\"));\r\n   })\r\n  }\r\n\r\n  getRandomFact =() => {\r\n    this.fetchFact('random/date');\r\n  }\r\n\r\n  render (){\r\n  return (<div className=\"App\">\r\n         <Header />\r\n         <div className='buttons'>\r\n         <Button getRandomFact = {this.getRandomFact} value='getRandomFact'/>\r\n         </div>\r\n         <h3>Or</h3>\r\n         <h4>Please Enter your Date of Birth(Year not needed)</h4>\r\n         <UserInput getDate={this.getDate} startDate={this.state.startDate}/>\r\n         <Fact factResult={this.state.Fact} />\r\n    </div>\r\n  );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// const MyComponent =()=> {\n//    return <h2>Way to go you just created a component!!</h2>;\n// }\n\n// function Message(props) {\n//   return <h1>Good to have you back, {props.username}</h1>;\n// }\n// function App() {\n//   return (<div><Message username=\"jim\" />\n//           <Message username=\"duke\" />\n//           <Message username=\"mike\" />\n//       </div>);\n// }\n\nReactDOM.render(\n // <MyComponent/>,\n  <App/>,\n  document.getElementById('root'));\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}